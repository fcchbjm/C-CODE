#include <stdio.h>

//基本

////包含一个叫stdio.h的文件 std-standard(标准) i-input o-output 即标准输入输出头文件
//#include <stdio.h>
////int 是整型的意思
////main前面的int表示main函数调用返回一个整型值
////void main() 这种写法已经过时
//int main()//主函数-程序的入口-有且只有一个，括号内可以为空或(void)表示main函数无参数，main函数可以有参数，如：int main(int argc,char* argv[])
//{//大括号内为函数体
//	printf("hello world！\n");//这里打印“hello world”-printf-print format（格式）-按照指定的格式打印的函数  \n表示输出后换行
//	//库函数-C语言本身提供给我们的函数 用#include来包含
//	return 0;//返回 0（整型），返回0表示正常返回
//}

//数据类型

//int main()
//{
//	//char bc = 'A';//向系统申请名为bc的内存并存放字符类型为“A”的数据
//	//printf("%c/n", bc);//%c-打印字符形式的数据
//
//	//int age = 20;//创建一个名为age的变量并赋值为20的整型
//	//printf("%d\n", age);//%d-打印整型十进制数据
//
//	//long num = 100;//长整形
//	//printf("%d\n", num);
//
//	//float f = 5.2;
//	//printf("%f\n", f);//%f-打印浮点型数字-打印小数
//
//	//double d = 3.14;
//	//printf("%lf\n", d);//%lf-打印双精度浮点型数字
//
//	//printf("%d\n", sizeof(char));//计算char这种变量可以向计算机申请多少内存
//	//printf("%d\n", sizeof(short));
//	//printf("%d\n", sizeof(int));
//	//printf("%d\n", sizeof(long));
//	//printf("%d\n", sizeof(long long)); 
//	//printf("%d\n", sizeof(float));
//	//printf("%d\n", sizeof(double));
//	////结果1 2 4 4 8 4 8 （字节数）
//	////C语言标准规定sizeof(long)>=sizeof(int)，所以sizeof(long)=4或8
//	////字节 bit-比特位 1或0  byte-字节 一个字节等于8个比特位 kb mb gb tb pb
//
//	//short age = 20;//向内存申请2个字节（16个比特位=0-65535），来存放变量名为age的“20”这个整型数字
//	//float weight = 95.6f;//向内存申请四个字节，用来存放小数，f表示95.6为单精度浮点数
//	//printf("%d\n",age);
//	//printf("%f\n", weight);
//
//	//总结:
//	//char        //字符数据类型
//	//short       //短整型
//	//int         //整型
//	//long        //长整型
//	//long long   //更长的整型
//	//float       //单精度浮点数
//	//double      //双精度浮点数
//	//%c-打印字符形式的数据
//	//%d-打印整型十进制数据
//	//%f-打印浮点型数字-打印小数
//	//%p-以地址的形式进行打印
//	//%x-打印16进制数字
//	//%o-打印8进制数字
//	//%lf-打印双精度浮点型数字
//	//网络总结:
//	//%d 十进制有符号整数
//	//%u 十进制无符号整数
//	//%f 浮点数
//	//%s 字符串
//	//%c 单个字符
//	//%p 指针的值
//	//%e 指数形式的浮点数
//	//%x, %X 无符号以十六进制表示的整数
//	//%0 无符号以八进制表示的整数
//	//%g 自动选择合适的表示法
//
//	return 0;
//}

//C语言关键字和ASCII编码

//int main()
//{
//	//常见关键字（32个）—关键字不能作为变量名
//	//case char goto const if int long register return sizeof auto break extern float for static 
//	//struct switch typedef union unsigned continue default do double else enum short signed void volatile while
//	//注：在C99标准中加⼊了 inline 、 restrict 、 _Bool 、 _Complex 、 _Imaginary 等关键字。
//
//	////ASCII 编码
//	////为方便计算机存储二进制数据，通过对字符编码从而在计算机上确定字符，如：A的ASCII码值为65，a的ASCII码值为97
//	////注意;1.48~57分别为0~9的ASCII码值 2.65~90分别为字母A~Z的ASCII码值 
//	////     3.大写字母的ASCII码值+32为小写字母的ASCII码值 4.ASCII码值为0~31是不可打印字符，⽆法打印在屏幕上观察
//	////0-数字0，ASCII码值为0-对应NUL '0'-字符0，ASCII码值为48，对应0
//	//printf("%c\n", 'A' + 32);//字符'A'的ASCII码值为65，加上32后为97，对应小写字母a
//	//printf("%c\n", 'Q');
//	//printf("%c\n", 81);//这⾥的81是字符Q的ASCII码值，也是可以正常打印的
//	//int i = 0;//显示所有可见字符
//	//for (i = 32; i <= 127; i++)
//	//{
//	//	printf("%c ", i);
//	//	if (i % 16 == 15)
//	//		printf("\n");
//	//}
//
//	return 0;
//}

//字符、字符串和\0

//int main()
//{
//	//'a';//用单引号''引起来的为单个字符
//	//"abcdefg";//用双引号""引起来的多个字符称为字符串
//	//printf("%c\n", 'a');
//	//printf("%s\n", "abcdef");//字符串可以用%s打印，也可以直接用双引号打印
//	//printf("hello!\n");//  
//	//printf("%s\n", "a");//一个字符串内可以只有一个字符
//	////C语言中把用双引号引起来的一串字符称为字符串字面值，简称字符串
//	//char arr1[] = "abc";//此时将字符串“abc”看作一个数组，并用名为arr1的字符串数组存放起来
//	////观察内存，分别存放了'a''b''c'和'\0'，而'\0'表示字符串的结束标志
//	//char arr2[] = {'d','e','f'};
//	////内存中只含有'd''e''f',不含结束标志，因此打印输出不正确
//	//char arr3[] = { 'd','e','f',0 };
//	////人工添加 0 或 '\0' 后，内存中含有结束符，因此正常打印
//	//printf("%s\n", arr1);//%s表示字符串
//	//printf("%s\n", arr2);
//	//printf("%s\n", arr3);
//
//	return 0;
//}

//转义字符-转变原来的意思的字符

//int main()
//{
//	////如n，t-普通字符，\n-换行符号,\t-水平制表符
//	//printf("C:\windows\test\n");//输出结果：“C:windows       est”其中\t被翻译成了水平制表符Tab，即结果中很长的空格
//	////早期C语言中由？？+其它字符称为三字母词，如：??)表示]，此时有\?\?)即可正常显示
//	//printf("C:\windows\\test\n");//此时输出结果正常
//	//printf("%c\n",'\'');//此处在'''中插入\避免''识别成转义符而发生错误
//	//printf("%s\n","\"");
//	//printf("%d\n",strlen("C:\test\32\test.c"));//输出结果为13，原本有17个字符，\t，\32均为转义字符，算作一个字符
//	////\32表示两个8进制数字，\ddd表示1~3个8进制数字
//	////此时32作为8进制数字所代表的10进制数字(26)，作为ASCII码值，对应的字符
//	//printf("%c\n", '\32');
//	//printf("%c\n", '\132');//8进制132对应的10进制数字为90，ASCII码对应为Z，与输出结果一致
//	////同理转义符\xdd,dd表示2个16进制的数字
//	//printf("%c\n", '\x61');//16进制61应的10进制数字为97，ASCII码对应为a，与输出结果一致
//	//printf("C:\windows\x63\n");
//	//printf("C:\action\bone\n");
//	//printf("C:\hello\rest\n");
//
//	////总结：
//	//\ ? ：在书写连续多个问号时使⽤，防⽌他们被解析成三字⺟词，在新的编译器上没法验证了。
//	// \' ：⽤于表⽰字符常量'
//	// \" ：⽤于表⽰⼀个字符串内部的双引号
//	// \\ ：⽤于表⽰⼀个反斜杠，防⽌它被解释为⼀个转义序列符。
//	// \a ：警报，这会使得终端发出警报声或出现闪烁，或者两者同时发⽣。
//	// \b ：退格键，光标回退⼀个字符，但不删除字符，但如果还需要输出，最后一个字符会被覆盖。
//	// \f ：换⻚符，光标移到下⼀⻚。在现代系统上，这已经反映不出来了，⾏为改成类似于 \v 。
//	// \n ：换⾏符。
//	// \r ：回⻋符，光标移到同⼀⾏的开头,但如果还需要输出，后面的字符会被覆盖。
//	// \t ：制表符，光标移到下⼀个⽔平制表位，通常是下⼀个8的倍数。
//	// \v ：垂直分隔符，光标移到下⼀个垂直制表位，通常是下⼀⾏的同⼀列。
//	////下⾯2种转义字符可以理解为：字符的8进制或者16进制表⽰形式
//	// \ddd ：d d d表⽰1~3个⼋进制的数字。 如： \130 表⽰字符X
//	// \xdd ：d d表⽰2个⼗六进制数字。 如： \x30 表⽰字符0
//	//\0 ：null 字符，代表没有内容， \0 就是 \ddd 这类转义字符的⼀种，⽤于字符串的结束标志，其ASCII码值是0.
//
//	return 0;
//}
