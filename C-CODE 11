#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>

//一维数组的创建及初始化

//int main()
//{
//	//char arr[10];//[]中必须包含常量表达式
//	//int arr2[10] = { 1,2,3 };//不完全初始化，剩下的元素默认初始化为0
//	//char arr3[5] = { 'a','b','c' };
//	//char arr4[5] = "abc";
//	//char arr5[5] = { 'a',98,'c' };
//	//char arr6[5] = { 'a','b','c','d','e' };//数组的初始化-创建数组并赋值
//	//char arr7[6] = { 'a','b','c','d','e',0 };//这里加入0或'\0'来作为数组结束标志
//	//char arr8[] = "abcdef";//自动根据初始化内容确定元素个数，如这里包含7个元素abcdef和\0
//	//char arr9[5] = { 'a',0,'c' };
//	//printf("%s\n", arr5);//一直打印直到遇到'\0'为止
//	//printf("%s\n", arr6);
//	//printf("%s\n", arr9);//遇到0停止打印
//	//printf("%d\n", sizeof(arr6));//结果：5
//	//printf("%d\n", strlen(arr6));//结果：19（x86）37（x64）-读取字符个数，直到遇到'\0'为止，由于此数组没有加入0，所以一直计算到末尾
//	//printf("%d\n", sizeof(arr7));//结果：6-sizeof计算数组所占空间大小-读取元素个数，'\0'也算
//	//printf("%d\n", strlen(arr7));//结果：5-strlen计算字符长度-读取字符个数，'\0'不算
//	//printf("%d\n", sizeof(arr8));//结果：7
//	//printf("%d\n", strlen(arr8));//结果：6
//	//printf("%d\n", strlen(arr9));//结果：1-遇到0停止计算
//	//printf("%d\n", sizeof(arr9));//结果：5
// 
//	//char arr[] = "abcdef";
//	//printf("%c\n", arr[3]);//[]内为数组的下标，下标从0开始，到数组元素个数减一为止
//	//int len = strlen(arr);
//	//for (int i = 0; i < len; i++)//利用循环打印数组内的所有元素
//	//{
//	//	printf("%c\n", arr[i]);
//	//}
//	//int arr2[] = { 1,2,3,4,5,6,7,8,9,0 };
//	//int sz = sizeof(arr2) / sizeof(arr2[0]);//确定元素个数
//	//for (int i = 0; i < sz; i++)
//	//{
//	//	printf("%d\n", arr2[i]);
//	//}
// 
//	return 0;
//}

//sizeof与strlen的区别
//1.sizeof和strlen没有什么关联
//2.strlen 是求字符串长度的-只能针对字符串求长度-库函数-引用<string.h>的头文件
//3.sizeof 计算变量、数组、类型的大小-单位是字节-操作符

//一维数组在内存中的存储

//int main()
//{
//	//int arr[] = { 1,2,3,4,5,6,7,8,9,0 };
//	//int sz = sizeof(arr) / sizeof(arr[0]);
//	//for (int i = 0; i < sz; i++)
//	//{
//	//	printf("&arr[%d]=%p\n", i, &arr[i]);
//	//	//输出结果（x64）如：
//	//	//&arr[0] = 000000F5D05CF9E8
//	//	//&arr[1] = 000000F5D05CF9EC
//	//	//&arr[2] = 000000F5D05CF9F0
//	//	//&arr[3] = 000000F5D05CF9F4
//	//	//&arr[4] = 000000F5D05CF9F8
//	//	//&arr[5] = 000000F5D05CF9FC
//	//	//&arr[6] = 000000F5D05CFA00
//	//	//&arr[7] = 000000F5D05CFA04
//	//	//&arr[8] = 000000F5D05CFA08
//	//	//&arr[9] = 000000F5D05CFA0C
//	//	//内存表示方式为16进制，数组在内存中是连续存放的，地址之间间隔4个字节（int类型的内存占用）
//	//}
//
//	//double arr[] = { 1,2,3,4,5,6,7,8,9,0 };
//	//int sz = sizeof(arr) / sizeof(arr[0]);
//	//for (int i = 0; i < sz; i++)
//	//{
//	//	printf("&arr[%d]=%p\n", i, &arr[i]);
//	//	//输出结果（x64）如：
//	//	//&arr[0] = 0000003925B7F920
//	//	//& arr[1] = 0000003925B7F928
//	//	//& arr[2] = 0000003925B7F930
//	//	//& arr[3] = 0000003925B7F938
//	//	//& arr[4] = 0000003925B7F940
//	//	//& arr[5] = 0000003925B7F948
//	//	//& arr[6] = 0000003925B7F950
//	//	//& arr[7] = 0000003925B7F958
//	//	//& arr[8] = 0000003925B7F960
//	//	//& arr[9] = 0000003925B7F968
//	//	//内存表示方式为16进制，数组在内存中是连续存放的，地址之间间隔8个字节（double类型的内存占用）
//	//}
//
//	return 0;
//}

//二维数组的创建及初始化

//int main()
//{
//	//int arr[3][4]; //二维数组的创建
//	//char arr2[3][5];
//	//double arr3[2][3];
//	//int arr4[3][4] = { 1,2,3,4,5,6 };//依据元素个数自动由第一行开始填充数组，剩下的填充0
//	//int arr5[3][4] = { {1,2,3},{4,5,6} };//依据大括号划分行数，剩下的填充0
//	//int arr6[][4] = { {1,2,3},{4,5,6} };//可以省略行数，但不能省略列数，自动依据列数确定行数
//
//	//int arr[5][4] = { {1,2,3,4},{5,6,7},{7,8},{9} };
//	//for (int m = 0; m <= 4; m++)
//	//{
//	//	for (int n = 0; n <= 3; n++)
//	//	{
//	//		printf("%-4d", arr[m][n]);
//	//	}
//	//	printf("\n");
//	//}
//
//	return 0;
//}

//二维数组在内存中的存储

//int main()
//{
//	int arr[2][3] = { 0 };
//	for (int m = 0; m <= 1; m++)
//	{
//		for (int n = 0; n <= 2; n++)
//		{
//			printf("arr[%d][%d]=%p\n", m, n, &arr[m][n]);
//			//打印结果（x64）：
//			//arr[0][0] = 000000B9A9F7F948
//			//arr[0][1] = 000000B9A9F7F94C
//			//arr[0][2] = 000000B9A9F7F950
//			//
//			//arr[1][0] = 000000B9A9F7F954
//			//arr[1][1] = 000000B9A9F7F958
//			//arr[1][2] = 000000B9A9F7F95C
//			//二维数组在内存中也是连续存储的，先行后列，间隔4个字节（int类型的内存占用）
//		}
//		printf("\n");
//	}
//	return 0;
//}
